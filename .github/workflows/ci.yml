name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        env:
          NEXT_TELEMETRY_DISABLED: 1
        run: npm run build

  test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

  e2e:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start development server
        run: npm run dev &
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: Wait for server
        run: npx wait-on http://localhost:3000

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          PLAYWRIGHT_HTML_REPORT: 1

      - name: Upload Playwright traces
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-traces
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  comment:
    needs: [build, test, e2e]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## CI Results')
            );

            const buildStatus = '${{ needs.build.result }}';
            const testStatus = '${{ needs.test.result }}';
            const e2eStatus = '${{ needs.e2e.result }}';

            const allPassed = buildStatus === 'success' && testStatus === 'success' && e2eStatus === 'success';
            
            const statusEmoji = allPassed ? '✅' : '❌';
            const statusText = allPassed ? 'All checks passed' : 'Some checks failed';

            const commentBody = `## CI Results ${statusEmoji}

**Status**: ${statusText}

| Job | Status |
|-----|--------|
| Build | ${buildStatus === 'success' ? '✅ Passed' : '❌ Failed'} |
| Unit Tests | ${testStatus === 'success' ? '✅ Passed' : '❌ Failed'} |
| E2E Tests | ${e2eStatus === 'success' ? '✅ Passed' : '❌ Failed'} |

${e2eStatus !== 'success' ? `
**E2E Test Artifacts**: [Download traces and reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
` : ''}

${!allPassed ? `
**Next Steps**:
- Check the [full CI logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
- Review test failures and fix issues
- Re-run tests locally with \`npm test\` and \`npm run test:e2e\`
` : ''}

---
*This comment was automatically generated by GitHub Actions*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody,
              });
            }
