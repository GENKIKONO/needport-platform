# .github/workflows/ci.yml
# Continuous Integration workflow for NeedPort Platform

name: CI - NeedPort Guardrails

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

# Limit concurrent runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Build and test job
  build-and-test:
    name: Build, Test & Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
        
    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch some history for better git SHA detection
          fetch-depth: 10

      # Setup Node.js
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Validate secrets and environment setup
      - name: Check secrets and setup environment
        run: |
          echo "üîç Validating CI environment and secrets..."
          node scripts/check-secrets.js --ci --verbose
          
          # Generate fallback env file for CI
          node scripts/check-secrets.js --generate
          
          # Set NODE_ENV for test environment
          echo "NODE_ENV=test" >> .env.local.generated
          
          echo "‚úÖ Environment setup complete"

      # Run linting first (fast feedback)
      - name: Run ESLint
        run: npm run lint

      # Build the application
      - name: Build application
        run: |
          # Use generated environment file for build
          cp .env.local.generated .env.local || echo "Using existing environment"
          npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      # Run unit tests
      - name: Run unit tests
        run: npm run test
        env:
          NODE_ENV: test

      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            coverage/
            test-results/
          retention-days: 3

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Install Playwright
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      # Run E2E tests
      - name: Run Playwright E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          NEXT_TELEMETRY_DISABLED: 1

      # Run golden path tests specifically
      - name: Run Golden Path tests
        run: npm run test:golden
        env:
          NODE_ENV: test
          NEXT_TELEMETRY_DISABLED: 1

      # Upload Playwright trace on failure
      - name: Upload Playwright trace
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  comment:
    needs: [build, test, e2e]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## CI Results')
            );

            const buildStatus = '${{ needs.build.result }}';
            const testStatus = '${{ needs.test.result }}';
            const e2eStatus = '${{ needs.e2e.result }}';

            const allPassed = buildStatus === 'success' && testStatus === 'success' && e2eStatus === 'success';
            
            const statusEmoji = allPassed ? '‚úÖ' : '‚ùå';
            const statusText = allPassed ? 'All checks passed' : 'Some checks failed';

            const commentBody = `## CI Results ${statusEmoji}

**Status**: ${statusText}

| Job | Status |
|-----|--------|
| Build | ${buildStatus === 'success' ? '‚úÖ Passed' : '‚ùå Failed'} |
| Unit Tests | ${testStatus === 'success' ? '‚úÖ Passed' : '‚ùå Failed'} |
| E2E Tests | ${e2eStatus === 'success' ? '‚úÖ Passed' : '‚ùå Failed'} |

${e2eStatus !== 'success' ? `
**E2E Test Artifacts**: [Download traces and reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
` : ''}

${!allPassed ? `
**Next Steps**:
- Check the [full CI logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
- Review test failures and fix issues
- Re-run tests locally with \`npm test\` and \`npm run test:e2e\`
` : ''}

---
*This comment was automatically generated by GitHub Actions*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody,
              });
            }
