#!/usr/bin/env node
// scripts/check-secrets.js
// Comprehensive secrets and environment validation for CI/CD

const fs = require('fs');
const path = require('path');

/**
 * Environment configuration with fallback values
 */
const CONFIG = {
  // Required for build (with fallbacks)
  build: {
    'NEXT_PUBLIC_SUPABASE_URL': 'https://test.supabase.co',
    'NEXT_PUBLIC_SUPABASE_ANON_KEY': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRlc3QiLCJyb2xlIjoiYW5vbiJ9.test',
    'NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY': 'pk_test_example'
  },
  
  // Optional for enhanced functionality
  optional: {
    'SUPABASE_SERVICE_ROLE_KEY': null, // Admin functions unavailable
    'CLERK_SECRET_KEY': null, // Server-side auth unavailable
    'STRIPE_SECRET_KEY': null, // Payment processing unavailable
    'SLACK_WEBHOOK_URL': null, // Slack notifications disabled
    'NOTIFICATION_EMAIL': null, // Email alerts disabled
    'SENTRY_DSN': null // Error reporting disabled
  },
  
  // Development only
  development: {
    'NEXT_PUBLIC_SITE_NOINDEX': 'true',
    'EXPERIMENTAL_B2B': '0'
  }
};

/**
 * Check and set environment variables with fallbacks
 */
function checkAndSetEnv() {
  const missing = [];
  const warnings = [];
  const applied = [];
  
  console.log('🔍 Checking environment variables and secrets...\n');
  
  // Check required build variables
  console.log('📦 Build Requirements:');
  for (const [key, fallback] of Object.entries(CONFIG.build)) {
    const value = process.env[key];
    
    if (!value) {
      process.env[key] = fallback;
      applied.push(`${key}=${fallback.slice(0, 20)}...`);
      console.log(`  ✅ ${key}: Using fallback value`);
    } else {
      console.log(`  ✅ ${key}: Configured`);
    }
  }
  
  // Check optional functionality
  console.log('\n🚀 Optional Features:');
  for (const [key, fallback] of Object.entries(CONFIG.optional)) {
    const value = process.env[key];
    
    if (!value) {
      warnings.push(`${key}: Feature unavailable (not configured)`);
      if (fallback) {
        process.env[key] = fallback;
        applied.push(`${key}=${fallback}`);
      }
      console.log(`  ⚠️  ${key}: Not configured (feature disabled)`);
    } else {
      console.log(`  ✅ ${key}: Configured`);
    }
  }
  
  // Set development defaults if in dev/test
  const nodeEnv = process.env.NODE_ENV || 'development';
  if (['development', 'test'].includes(nodeEnv)) {
    console.log('\n🧪 Development Configuration:');
    for (const [key, value] of Object.entries(CONFIG.development)) {
      if (!process.env[key]) {
        process.env[key] = value;
        applied.push(`${key}=${value}`);
        console.log(`  ✅ ${key}: Set to ${value}`);
      }
    }
  }
  
  return { missing, warnings, applied };
}

/**
 * Generate .env.local for development
 */
function generateEnvFile() {
  const envPath = path.join(process.cwd(), '.env.local.generated');
  const lines = ['# Generated environment file with fallbacks', ''];
  
  // Add build requirements
  lines.push('# Build Requirements');
  for (const [key, fallback] of Object.entries(CONFIG.build)) {
    if (!process.env[key]) {
      lines.push(`${key}=${fallback}`);
    }
  }
  
  // Add development settings
  const nodeEnv = process.env.NODE_ENV || 'development';
  if (['development', 'test'].includes(nodeEnv)) {
    lines.push('', '# Development Settings');
    for (const [key, value] of Object.entries(CONFIG.development)) {
      lines.push(`${key}=${value}`);
    }
  }
  
  lines.push('', '# Generated by scripts/check-secrets.js', '');
  
  fs.writeFileSync(envPath, lines.join('\n'));
  console.log(`\n📝 Generated ${envPath} with fallback values`);
}

/**
 * Validate current configuration
 */
function validateConfiguration() {
  console.log('\n🔧 Configuration Validation:');
  
  const checks = [
    {
      name: 'Build capability',
      test: () => !!process.env.NEXT_PUBLIC_SUPABASE_URL && !!process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY,
      impact: 'Build will fail',
      severity: 'error'
    },
    {
      name: 'Database admin operations',
      test: () => !!process.env.SUPABASE_SERVICE_ROLE_KEY,
      impact: 'Admin features unavailable',
      severity: 'warning'
    },
    {
      name: 'Server-side authentication',
      test: () => !!process.env.CLERK_SECRET_KEY,
      impact: 'Some auth features limited',
      severity: 'warning'
    },
    {
      name: 'Monitoring notifications',
      test: () => !!process.env.SLACK_WEBHOOK_URL || !!process.env.NOTIFICATION_EMAIL,
      impact: 'No failure alerts',
      severity: 'info'
    },
    {
      name: 'Payment processing',
      test: () => !!process.env.STRIPE_SECRET_KEY,
      impact: 'Payment features disabled',
      severity: 'info'
    }
  ];
  
  const results = { errors: 0, warnings: 0, info: 0 };
  
  for (const check of checks) {
    const passed = check.test();
    const icon = passed ? '✅' : (check.severity === 'error' ? '❌' : check.severity === 'warning' ? '⚠️' : 'ℹ️');
    const status = passed ? 'OK' : check.impact;
    
    console.log(`  ${icon} ${check.name}: ${status}`);
    
    if (!passed) {
      results[check.severity]++;
    }
  }
  
  return results;
}

/**
 * Main execution
 */
function main() {
  const args = process.argv.slice(2);
  const flags = {
    generate: args.includes('--generate') || args.includes('-g'),
    ci: args.includes('--ci'),
    verbose: args.includes('--verbose') || args.includes('-v')
  };
  
  console.log('🚀 NeedPort Environment Validation\n');
  
  // Check and set environment
  const { missing, warnings, applied } = checkAndSetEnv();
  
  // Generate env file if requested
  if (flags.generate) {
    generateEnvFile();
  }
  
  // Validate configuration
  const results = validateConfiguration();
  
  // Summary
  console.log('\n📊 Summary:');
  console.log(`  Applied fallbacks: ${applied.length}`);
  console.log(`  Warnings: ${warnings.length}`);
  console.log(`  Configuration errors: ${results.errors}`);
  
  if (flags.verbose) {
    if (applied.length > 0) {
      console.log('\n🔧 Applied Fallbacks:');
      applied.forEach(item => console.log(`  - ${item}`));
    }
    
    if (warnings.length > 0) {
      console.log('\n⚠️  Warnings:');
      warnings.forEach(item => console.log(`  - ${item}`));
    }
  }
  
  // CI mode: fail if critical errors
  if (flags.ci && results.errors > 0) {
    console.log('\n❌ Critical configuration errors detected in CI mode');
    process.exit(1);
  }
  
  console.log('\n✅ Environment validation complete');
  
  // Set exit code based on severity
  if (results.errors > 0) {
    process.exit(1);
  } else if (results.warnings > 0) {
    process.exit(0); // Warnings are non-fatal
  } else {
    process.exit(0);
  }
}

// Export for testing
if (require.main === module) {
  main();
} else {
  module.exports = { checkAndSetEnv, validateConfiguration, CONFIG };
}